package com.example.calculator111

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.security.keystore.KeyGenParameterSpec
import android.security.keystore.KeyProperties
import android.util.Log
import android.widget.Button
import android.widget.EditText
import androidx.credentials.CreatePasswordRequest
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.credentials.ClearCredentialStateRequest
import androidx.credentials.CredentialManager
import androidx.credentials.exceptions.CreateCredentialException
import com.google.android.gms.common.GoogleApiAvailability
import java.security.KeyStore
import javax.crypto.KeyGenerator

class SetupPassKeyActivity : AppCompatActivity() {

    private lateinit var etPassKey: EditText
    private lateinit var etConfirmPassKey: EditText
    private lateinit var btnSetPassKey: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_setup_pass_key)

        etPassKey = findViewById(R.id.etPassKey)
        etConfirmPassKey = findViewById(R.id.etConfirmPassKey)
        btnSetPassKey = findViewById(R.id.btnSetPassKey)


        btnSetPassKey.setOnClickListener {
            val passKey = etPassKey.text.toString()
            val confirmPassKey = etConfirmPassKey.text.toString()

            if (passKey == confirmPassKey) {
                savePassKey(this, passKey) // –°–æ—Ö—Ä–∞–Ω—è–µ–º Pass Key

            } else {
                showError("Pass Key –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            }
        }
    }

    private fun deletePassKey(context: Context) {
        val credentialManager = CredentialManager.create(context)

        CoroutineScope(Dispatchers.IO).launch {
            try {
                credentialManager.clearCredentialState(ClearCredentialStateRequest())
                Log.d("PassKey", "‚úÖ –°—Ç–∞—Ä—ã–π Passkey —É–¥–∞–ª–µ–Ω")
            } catch (e: Exception) {
                Log.e("PassKey", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Passkey: ${e.message}")
            }
        }
    }

    fun generatePassKey() {
        val keyStore = KeyStore.getInstance("AndroidKeyStore")
        keyStore.load(null)

        val keyGenerator = KeyGenerator.getInstance(
            KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore"
        )

        val keyGenParameterSpec = KeyGenParameterSpec.Builder(
            "pass_key_alias", // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è –∫–ª—é—á–∞
            KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
        )
            .setBlockModes(KeyProperties.BLOCK_MODE_GCM) // –†–µ–∂–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE) // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            .setUserAuthenticationRequired(true) // –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            .setUserAuthenticationValidityDurationSeconds(30) // –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            .build()

        keyGenerator.init(keyGenParameterSpec)
        keyGenerator.generateKey() // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
    }

    private fun savePassKey(context: Context, key: String) {
        deletePassKey(context)
        val credentialManager = CredentialManager.create(context)
        val request = CreatePasswordRequest(
            id = "calculator", // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å email)
            password = key // –°–∞–º Passkey (–ø–∞—Ä–æ–ª—å)
        )
        if (credentialManager == null) {
            Log.e("PassKey", "‚ùå Credential Manager –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!")
        } else {
            Log.d("PassKey", "‚úÖ Credential Manager –¥–æ—Å—Ç—É–ø–µ–Ω")
        }
        val status = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context)
        if (status != com.google.android.gms.common.ConnectionResult.SUCCESS) {
            Log.e("PassKey", "‚ùå Google Play Services –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –∫–æ–¥ –æ—à–∏–±–∫–∏ $status")
        } else {
            Log.d("PassKey", "‚úÖ Google Play Services —Ä–∞–±–æ—Ç–∞–µ—Ç")
        }
        CoroutineScope(Dispatchers.IO).launch {
            Log.d("PassKey", "üìå –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º credentialManager.createCredential()")
            try {
                credentialManager.createCredential(context, request)
                Log.d("PassKey", "‚úÖ Passkey —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Password Manager")
                CoroutineScope(Dispatchers.Main).launch {
                    generatePassKey() // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –≤ KeyStore
                    showMessage("Pass Key —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    startActivity(Intent(context, LoginActivity::class.java))
                    finish()
                }
            } catch (e: CreateCredentialException) {
                Log.e("PassKey", "‚ùå –û—à–∏–±–∫–∞ Credential Manager: ${e.message}")
            } catch (e: SecurityException) {
                Log.e("PassKey", "‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤–∫–ª—é—á–µ–Ω –ª–∏ Google Play Services?): ${e.message}")
            } catch (e: IllegalArgumentException) {
                Log.e("PassKey", "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–æ–≤–µ—Ä—å id/password): ${e.message}")
            } catch (e: Exception) {
                Log.e("PassKey", "‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
            }
        }

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SharedPreferences
        val sharedPreferences = context.getSharedPreferences("AppPrefs", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        editor.putString("pass_key", key)
        editor.apply()
        Log.d("PassKey", "‚úÖ Passkey —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ SharedPreferences")
    }

    private fun showMessage(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}